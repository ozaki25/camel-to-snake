{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["camelToSnake","value","split","join","toLowerCase","Container","styled","div","TextArea","textarea","Pre","pre","App","useState","input","setInput","result","setResult","checked","setChecked","onChange","e","target","replace","lineToComma","onClick","htmlFor","id","type","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"uiBAGA,SAASA,EAAaC,GACpB,OAAOA,EACJC,MAAM,aACNC,KAAK,KACLC,cAOL,IAAMC,EAAYC,IAAOC,IAAV,KAITC,EAAWF,IAAOG,SAAV,KAKRC,EAAMJ,IAAOK,IAAV,KA6CMC,MAzCf,WAAgB,IAAD,EACaC,mBAAS,IADtB,mBACNC,EADM,KACCC,EADD,OAEeF,mBAAS,IAFxB,mBAENG,EAFM,KAEEC,EAFF,OAGiBJ,oBAAS,GAH1B,mBAGNK,EAHM,KAGGC,EAHH,KAuBb,OACE,kBAACd,EAAD,KACE,kBAACG,EAAD,CAAUY,SApBO,SAAAC,GACnB,IAAMpB,EAAQoB,EAAEC,OAAOrB,MACvBc,EAASd,GACT,IAAMe,EAASE,EAzBnB,SAAqBjB,GACnB,OAAOA,EAAMsB,QAAQ,SAAU,MAyBzBC,CAAYxB,EAAaC,IACzBD,EAAaC,GACjBgB,EAAUD,IAc0Bf,MAAOa,IACzC,kBAACJ,EAAD,KAAMM,GACN,4BAAQS,QATI,WACdV,EAAS,IACTE,EAAU,MAOR,sBACA,2BAAOS,QAAQ,SAAf,uCAEE,2BACEC,GAAG,QACHC,KAAK,WACLV,QAASA,EACTE,SApBc,WACpBD,GAAYD,SC9BIW,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.57af525e.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport styled from 'styled-components';\n\nfunction camelToSnake(value) {\n  return value\n    .split(/(?=[A-Z])/)\n    .join('_')\n    .toLowerCase();\n}\n\nfunction lineToComma(value) {\n  return value.replace(/\\r?\\n/g, ', ');\n}\n\nconst Container = styled.div`\n  margin: 10px 15px;\n`;\n\nconst TextArea = styled.textarea`\n  width: 100%;\n  height: 300px;\n`;\n\nconst Pre = styled.pre`\n  background-color: #e5e5e5;\n`;\n\nfunction App() {\n  const [input, setInput] = useState('');\n  const [result, setResult] = useState('');\n  const [checked, setChecked] = useState(false);\n\n  const onChangeText = e => {\n    const value = e.target.value;\n    setInput(value);\n    const result = checked\n      ? lineToComma(camelToSnake(value))\n      : camelToSnake(value);\n    setResult(result);\n  };\n\n  const onChangeCheck = () => {\n    setChecked(!checked);\n  };\n\n  const onClick = () => {\n    setInput('');\n    setResult('');\n  };\n\n  return (\n    <Container>\n      <TextArea onChange={onChangeText} value={input} />\n      <Pre>{result}</Pre>\n      <button onClick={onClick}>クリア</button>\n      <label htmlFor=\"comma\">\n        カンマ区切り\n        <input\n          id=\"comma\"\n          type=\"checkbox\"\n          checked={checked}\n          onChange={onChangeCheck}\n        />\n      </label>\n    </Container>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}